project.afterEvaluate {
    preBuild.doFirst {
        def fileBase = 'xdl-android-lib-' + XDL_VERSION
        def pathBase = project.buildDir.absolutePath + File.separator + 'nativedeps' + File.separator + 'xdl' + File.separator
        def urlBase = 'https://dl.bintray.com/hexhacking/maven/io/hexhacking/xdl/xdl-android-lib/' + XDL_VERSION + '/' + fileBase

        ['aar': '.aar', 'header': '-native-header.zip'].each { type, suffix ->
            downloadUnzip(urlBase + suffix, pathBase + type + File.separator + fileBase + suffix)
        }
    }
}

static def downloadUnzip(String url, String filename) {
    def newFile = new File(filename)
    if(newFile.exists()) {
        return
    }

    def newDir = new File(newFile.parent)
    if (!newDir.exists()) {
        newDir.mkdirs()
    } else {
        newDir.deleteDir()
        newDir.mkdirs()
    }

    try {
        while (url) {
            new URL(url).openConnection().with { conn ->
                conn.instanceFollowRedirects = false
                url = conn.getHeaderField("Location")
                if (!url) {
                    newFile.withOutputStream { out ->
                        conn.inputStream.with { inp ->
                            out << inp
                            inp.close()
                        }
                    }
                }
            }
        }

        if (newFile.exists()) {
            def zip = new java.util.zip.ZipFile(newFile)
            zip.entries().each {
                if (!it.isDirectory()) {
                    def fout = new File(newDir.getPath() + File.separator + it.name)
                    new File(fout.parent).mkdirs()
                    def fos = new FileOutputStream(fout)
                    def buf = new byte[it.size]
                    def len = zip.getInputStream(it).read(buf)
                    fos.write(buf, 0, len)
                    fos.close()
                }
            }
            zip.close()
        }
    } catch(Exception ex) {
        newDir.deleteDir()
        throw ex
    }
}
